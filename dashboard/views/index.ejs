<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sensors Dashboard</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Custom CSS -->
  <style>
    /* Ensure the body and html take full height */
    html, body {
      height: 100%;
      margin: 0;
    }

    /* Top Navbar */
    .navbar {
      position: fixed;
      background-color: #003366;
      top: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
    }

    /* Left Sidebar */

    .sidebar {
    top:56px;    
    height: calc(100% - 56px); /* Full height */
    width: 200px;
    position: fixed; /* Fixed sidebar */
    left: 0;
    padding-top: 40px;
    border-right: 1px solid #ddd;

    background-color: #a3a4a5; /* Professional dark color */
    color: #ECF0F1; /* Light text */
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    overflow-y: auto;

    }

    .sidebar h5 {
    font-weight: bold;
    }

    .sidebar .nav-link {
    color: #ECF0F1; /* Default light color */
    font-size: 16px;
    padding: 10px 15px;
    border-radius: 5px;
    transition: all 0.3s ease; /* Smooth hover effect */
    }

    .sidebar .nav-link:hover {
    background-color: #34495E; /* Highlight on hover */
    color: #1ABC9C; /* Accent green */
    text-decoration: none;
    }

    .sidebar .nav-link.active {
    background-color: #1ABC9C; /* Active link */
    color: #FFFFFF; /* White text */
    }

    .sidebar .nav-link i {
    font-size: 18px; /* Icon size */
    }

    /* Main Content Area */
    .content {
      margin-top: 56px; /* Height of the navbar */
      margin-left: 200px; /* Width of the sidebar */
      padding: 20px;
      height: calc(100% - 56px);
      overflow-y: auto; /* Enable scrolling */
      background-color: #ededed;
    }
  </style>
</head>
<body>

  <!-- Top Navigation Bar -->
  <nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Chemical LAB</a>
      <div class="collapse navbar-collapse justify-content-end">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/account">Account</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/logout">Logout</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

<!-- Left Sidebar -->
<div class="sidebar bg-dark text-light">
    <h5 class="text-center py-3 border-bottom">Menu</h5>
    <ul class="nav flex-column px-2">
      <li class="nav-item my-2">
        <a class="nav-link active text-light d-flex align-items-center" href="">
          <i class="bi bi-speedometer2 me-2"></i> Dashboard
        </a>
      </li>
      <li class="nav-item my-2">
        <a class="nav-link text-light d-flex align-items-center" href="/data">
          <i class="bi bi-gear-fill me-2"></i> Sensors DATA
        </a>
      </li>
      <li class="nav-item my-2">
        <a class="nav-link text-light d-flex align-items-center" href="/report">
          <i class="bi bi-bar-chart-fill me-2"></i> Reports
        </a>
      </li>
      <li class="nav-item my-2">
        <a class="nav-link text-light d-flex align-items-center" href="/help">
          <i class="bi bi-question-circle-fill me-2"></i> Help
        </a>
      </li>
    </ul>
  </div>
  
  <!-- Main Content Area -->
  <div class="content">
    <div class="container">
      <h1 class="text-center mb-4">Sensors Dashboard</h1>
      <!-- Row 1: Temperature, Humidity, Pressure Charts -->
      <div class="row">
        <div class="col-md-4">
          <h5>Temperature</h5>
          <canvas id="temperatureChart"></canvas>
        </div>
        <div class="col-md-4">
          <h5>Humidity</h5>
          <canvas id="humidityChart"></canvas>
        </div>
        <div class="col-md-4">
          <h5>Pressure</h5>
          <canvas id="pressureChart"></canvas>
        </div>
      </div>

      <!-- Row 2: Flame Analog Chart, Flame Status Pie -->
      <div class="row mt-5">
        <div class="col-md-6">
          <h5>Flame Analog Value</h5>
          <canvas id="flameAnalogChart"></canvas>
        </div>
        <div class="col-md-6">
          <h5>Flame Status Distribution</h5>
          <canvas id="flameStatusChart"></canvas>
        </div>
      </div>

      <!-- Row 3: MQ5 Gas Gauge Chart -->
      <div class="row mt-5">
        <div class="col-md-6 offset-md-3">
          <h5>MQ5 Gas Sensor</h5>
          <canvas id="mq5Chart"></canvas>
        </div>
      </div>

      <!-- Row 4: Distance Chart -->
      <div class="row mt-5">
        <div class="col-md-6 offset-md-3">
          <h5>Ultrasonic Distance</h5>
          <canvas id="distanceChart"></canvas>
        </div>
      </div>
    </div>

      
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 
  <script src="/socket.io/socket.io.js"></script>

  <script>
    // Fetch data from the backend
    async function fetchData() {
      try {
        const response = await fetch('http://localhost:3000/sensorsData'); // Assurez-vous que votre API fonctionne ici
        const data = await response.json();
        return data;
      } catch (error) {
        alert('Erreur lors de la rÃ©cupÃ©ration des donnÃ©es:',error);
        console.error('Erreur lors de la rÃ©cupÃ©ration des donnÃ©es:', error);
        return [];
      }
    }

    // Generate charts
    async function generateCharts() {
      const data = await fetchData();

      if (data.length === 0) {
        alert("Aucune donnÃ©e disponible.");
        console.warn("Aucune donnÃ©e disponible.");
        return;
      }

      // Map data into separate arrays for each chart
      const timestamps = data.map(entry => new Date(entry.timestamp).toLocaleTimeString());
      const temperatures = data.map(entry => entry.bme.temperature);
      const humidities = data.map(entry => entry.bme.humidity);
      const pressures = data.map(entry => entry.bme.pressure);
      const flameStatuses = data.map(entry => entry.flame.status);
      const flameAnalogValues = data.map(entry => entry.flame.analog);
      const mq5Values = data.map(entry => entry.mq5.value);
      const distances = data.map(entry => entry.ultrasonic.distance);

      // Temperature Chart
      new Chart(document.getElementById('temperatureChart'), {
        type: 'line',
        data: {
          labels: timestamps,
          datasets: [{
            label: 'Temperature (Â°C)',
            data: temperatures,
            borderColor: 'red',
            backgroundColor: 'rgba(255, 0, 0, 0.2)',
            fill: true
          }]
        }
      });

      // Humidity Chart
      new Chart(document.getElementById('humidityChart'), {
        type: 'line',
        data: {
          labels: timestamps,
          datasets: [{
            label: 'Humidity (%)',
            data: humidities,
            borderColor: 'blue',
            backgroundColor: 'rgba(0, 0, 255, 0.2)',
            fill: true
          }]
        }
      });

      // Pressure Chart
      new Chart(document.getElementById('pressureChart'), {
        type: 'line',
        data: {
          labels: timestamps,
          datasets: [{
            label: 'Pressure (hPa)',
            data: pressures,
            borderColor: 'green',
            backgroundColor: 'rgba(0, 255, 0, 0.2)',
            fill: true
          }]
        }
      });

      // Flame Analog Chart
      new Chart(document.getElementById('flameAnalogChart'), {
        type: 'bar',
        data: {
          labels: timestamps,
          datasets: [{
            label: 'Flame Analog Value',
            data: flameAnalogValues,
            backgroundColor: 'orange'
          }]
        }
      });

      // Flame Status Pie Chart
      const flameDetected = flameStatuses.filter(status => status === 1).length;
      const flameNotDetected = flameStatuses.filter(status => status === 0).length;
      new Chart(document.getElementById('flameStatusChart'), {
        type: 'pie',
        data: {
          labels: ['Detected', 'Not Detected'],
          datasets: [{
            data: [flameDetected, flameNotDetected],
            backgroundColor: ['#ff5722', '#9e9e9e']
          }]
        }
      });

      // MQ5 Gas Sensor Gauge
      new Chart(document.getElementById('mq5Chart'), {
        type: 'doughnut',
        data: {
          labels: ['Low', 'Medium', 'High'],
          datasets: [{
            data: [
              mq5Values.filter(value => value < 200).length,
              mq5Values.filter(value => value >= 200 && value <= 400).length,
              mq5Values.filter(value => value > 400).length
            ],
            backgroundColor: ['#4caf50', '#ff9800', '#f44336']
          }]
        }
      });

      // Distance Chart (Ultrasonic Sensor)
      new Chart(document.getElementById('distanceChart'), {
        type: 'line',
        data: {
          labels: timestamps,
          datasets: [{
            label: 'Distance (cm)',
            data: distances,
            borderColor: 'purple',
            backgroundColor: 'rgba(128, 0, 128, 0.2)',
            fill: true
          }]
        }
      });
    }

    // Initialize dashboard
    generateCharts();

    const socket = io();

    // Recevoir les alertes
    socket.on('alert', (alert) => {
      // Afficher l'alerte (par exemple, via une notification ou un tableau)
      alert(`ðŸš¨ ${alert.type} : ${alert.message}`);
      console.log("Alerte reÃ§ue :", alert);
    });

  </script>

</body>
</html>
